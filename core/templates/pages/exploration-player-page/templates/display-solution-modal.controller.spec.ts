// Copyright 2020 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Unit tests for DisplaySolutionModalController.
 */

import { UpgradedServices } from 'services/UpgradedServices';
import { TestBed } from '@angular/core/testing';
import { AudioTranslationManagerService } from '../services/audio-translation-manager.service';
import { AutogeneratedAudioPlayerService } from 'services/autogenerated-audio-player.service';
import { PlayerPositionService } from '../services/player-position.service';
import { PlayerTranscriptService } from '../services/player-transcript.service';

fdescribe('Display Solution Modal Controller', function() {
  var $rootScope = null;
  var $scope = null;
  var $uibModalInstance = null;
  var contextService = null;
  var HintsAndSolutionManagerService = null;
  var InteractionObjectFactory = null;
  var playerTranscriptService = null;
  var RecordedVoiceoversObjectFactory = null;
  var SolutionObjectFactory = null;
  var StateCardObjectFactory = null;

  var card = null;
  var solution = null;

  beforeEach(angular.mock.module('oppia'));
  // beforeEach(angular.mock.module('oppia', function($provide) {
  //   var ugs = new UpgradedServices();
  //   for (let [key, value] of Object.entries(ugs.getUpgradedServices())) {
  //     $provide.value(key, value);
  //   }
  // }));

  beforeEach(function() {
    TestBed.configureTestingModule({
      providers: [
        AudioTranslationManagerService,
        AutogeneratedAudioPlayerService,
        PlayerPositionService,
        PlayerTranscriptService
      ]
    });
  });

  beforeEach(angular.mock.inject(function($injector, $controller) {
    $rootScope = $injector.get('$rootScope');
    contextService = $injector.get('ContextService');
    spyOn(contextService, 'getExplorationId').and.returnValue('exp1');

    HintsAndSolutionManagerService = $injector.get(
      'HintsAndSolutionManagerService');
    InteractionObjectFactory = $injector.get('InteractionObjectFactory');
    playerTranscriptService = $injector.get('PlayerTranscriptService');
    RecordedVoiceoversObjectFactory = $injector.get(
      'RecordedVoiceoversObjectFactory');
    SolutionObjectFactory = $injector.get('SolutionObjectFactory');
    StateCardObjectFactory = $injector.get('StateCardObjectFactory');

    $uibModalInstance = jasmine.createSpyObj(
      '$uibModalInstance', ['close', 'dismiss']);

    solution = SolutionObjectFactory.createNew(
      true, 'Correct answer', 'Explanation html', 'exp1');
    spyOn(HintsAndSolutionManagerService, 'displaySolution').and.returnValue(
      solution);

    var interaction = InteractionObjectFactory.createFromBackendDict({
      answer_groups: [],
      confirmed_unclassified_answers: [],
      customization_args: {},
      hints: [],
      id: 'interaction_1'
    });
    var recordedVoiceovers = RecordedVoiceoversObjectFactory.createEmpty();
    card = StateCardObjectFactory.createNewCard(
      'Card 1', 'Content html', 'Interaction text', interaction,
      recordedVoiceovers, 'content_id');
    spyOn(playerTranscriptService, 'getCard').and.returnValue(card);

    spyOn($rootScope, '$broadcast').and.callThrough();

    $scope = $rootScope.$new();
    $controller('DisplaySolutionModalController', {
      $rootScope: $rootScope,
      $scope: $scope,
      $uibModalInstance: $uibModalInstance
    });
  }));

  it('should evaluate initialized properties', function() {
    expect($scope.isHint).toBe(false);
    expect($scope.shortAnswerHtml).toEqual({
      prefix: 'The only',
      answer: '<oppia-short-response-interaction_1 answer="&amp;quot;' +
        'Correct answer&amp;quot;"></oppia-short-response-interaction_1>'
    });
    expect($scope.solutionExplanationHtml).toBe('Explanation html');

    expect($rootScope.$broadcast).toHaveBeenCalledWith('autoPlayAudio');
  });

  it('should dismiss modal', function() {
    $scope.closeModal();

    expect($uibModalInstance.cancel).toHaveBeenCalledWith('cancel');
  });
});
